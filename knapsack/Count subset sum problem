/*
  Mother Problem : 0-1 Knapsack

    Problem Statement : Count Of Subset Sum Problem
    Given and array you need to find total number of subset into and array whoes sum is equal to the sum given in the question .
	
	Explanation Link : https://www.youtube.com/watch?v=F7wqWbqYn9g&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=13
    
	Input 1: 
      N=6
      Array=[2,3,5,6,8,10]
      Sum=10
    
    Output : 
      Total Subset whoes sum = 10 are : 3
      
      Explanation : [10], [2,8] , [2,3,5]
 

*/

#include<bits/stdc++.h>
using namespace std;

int dp[101][101];


//function for priting the possible susbsets using recursion without dp
int ispossible_without_dp(vector<int> &v,int sum,int curr,string str)
{
  if(sum==0)
  {
    cout<<str<<"\n";
    return 1;
  }
  if(curr==0)
  {
    return 0;
  }
  if(v[curr]>sum)
  {
    return ispossible_without_dp(v,sum,curr-1,str);
  }
  return ispossible_without_dp(v,sum-v[curr],curr-1,str+to_string(v[curr])+" ")+ispossible_without_dp(v,sum,curr-1,str);
}

int ispossible(vector<int> &v,int sum,int curr)
{
  if(sum==0)
  {
    return 1;
  }
  if(curr==0)
  {
    return 0;
  }
  if(dp[sum][curr]!=-1)
  {
    return dp[sum][curr];
  }
  else
  {
    if(v[curr]>sum)
    {
      dp[sum][curr]=ispossible(v,sum,curr-1);
      return dp[sum][curr];
    }
    else
    {
      dp[sum][curr]=ispossible(v,sum-v[curr],curr-1)+ispossible(v,sum,curr-1); 
      return dp[sum][curr];
    }
  }
}

int ispossible_print(vector<int> &v,int sum,int curr)
{
  if(sum==0)
  {
    return 1;
  }
  if(curr==0)
  {
    return 0;
  }
  if(dp[sum][curr]!=-1)
  {
    return dp[sum][curr];
  }
  else
  {
    if(v[curr]>sum)
    {
      dp[sum][curr]=ispossible_print(v,sum,curr-1);
      return dp[sum][curr];
    }
    else
    {
      dp[sum][curr]=ispossible_print(v,sum-v[curr],curr-1)+ispossible_print(v,sum,curr-1); 
      return dp[sum][curr];
    }
  }
}



void init_dp()
{
  for(int i=0;i<=100;i++)
  {
    for(int j=0;j<=100;j++)
    {
      dp[i][j]=-1;
    }
  }
}

int main()
{
  int n;
  cin>>n;
  vector<int> v(n+1); // one indexing
  for(int i=1;i<=n;i++)
  {
    cin>>v[i];
  }
  int sum;
  cin>>sum;
  init_dp();
  cout<<ispossible_without_dp(v,sum,n,"");
  return 0;
}
